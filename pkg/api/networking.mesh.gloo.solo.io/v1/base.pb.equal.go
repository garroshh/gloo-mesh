// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/networking/v1/base.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *StringMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*StringMatch)
	if !ok {
		that2, ok := that.(StringMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetIgnoreCase() != target.GetIgnoreCase() {
		return false
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		if _, ok := target.MatchType.(*StringMatch_Exact); !ok {
			return false
		}

		if strings.Compare(m.GetExact(), target.GetExact()) != 0 {
			return false
		}

	case *StringMatch_Prefix:
		if _, ok := target.MatchType.(*StringMatch_Prefix); !ok {
			return false
		}

		if strings.Compare(m.GetPrefix(), target.GetPrefix()) != 0 {
			return false
		}

	case *StringMatch_Regex:
		if _, ok := target.MatchType.(*StringMatch_Regex); !ok {
			return false
		}

		if strings.Compare(m.GetRegex(), target.GetRegex()) != 0 {
			return false
		}

	case *StringMatch_Suffix:
		if _, ok := target.MatchType.(*StringMatch_Suffix); !ok {
			return false
		}

		if strings.Compare(m.GetSuffix(), target.GetSuffix()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.MatchType != target.MatchType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ObjectMeta) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectMeta)
	if !ok {
		that2, ok := that.(ObjectMeta)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetClusterName(), target.GetClusterName()) != 0 {
		return false
	}

	if strings.Compare(m.GetResourceVersion(), target.GetResourceVersion()) != 0 {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if len(m.GetAnnotations()) != len(target.GetAnnotations()) {
		return false
	}
	for k, v := range m.GetAnnotations() {

		if strings.Compare(v, target.GetAnnotations()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *TypeMeta) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TypeMeta)
	if !ok {
		that2, ok := that.(TypeMeta)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKind(), target.GetKind()) != 0 {
		return false
	}

	if strings.Compare(m.GetApiVersion(), target.GetApiVersion()) != 0 {
		return false
	}

	return true
}
